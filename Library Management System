import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class LibraryManagementSystem {

    static class Book {
        String title;
        String author;
        int id;
        boolean isIssued;

        public Book(int id, String title, String author) {
            this.id = id;
            this.title = title;
            this.author = author;
            this.isIssued = false;
        }

        @Override
        public String toString() {
            return id + ": " + title + " by " + author + (isIssued ? " (Issued)" : " (Available)");
        }
    }

    static class User {
        String name;
        int userId;
        ArrayList<Book> issuedBooks;

        public User(int userId, String name) {
            this.userId = userId;
            this.name = name;
            this.issuedBooks = new ArrayList<>();
        }
    }

    static class Library {
        ArrayList<Book> books = new ArrayList<>();
        HashMap<Integer, User> users = new HashMap<>();
        Scanner scanner = new Scanner(System.in);

        // Admin functionality
        public void adminMenu() {
            while (true) {
                System.out.println("\nAdmin Menu:");
                System.out.println("1. Add Book");
                System.out.println("2. Delete Book");
                System.out.println("3. View All Books");
                System.out.println("4. Manage Users");
                System.out.println("5. Logout");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addBook();
                        break;
                    case 2:
                        deleteBook();
                        break;
                    case 3:
                        viewAllBooks();
                        break;
                    case 4:
                        manageUsers();
                        break;
                    case 5:
                        System.out.println("Logged out successfully.");
                        return;
                    default:
                        System.out.println("Invalid choice! Try again.");
                }
            }
        }

        private void addBook() {
            System.out.print("Enter Book ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            System.out.print("Enter Book Title: ");
            String title = scanner.nextLine();
            System.out.print("Enter Author Name: ");
            String author = scanner.nextLine();

            books.add(new Book(id, title, author));
            System.out.println("Book added successfully!");
        }

        private void deleteBook() {
            System.out.print("Enter Book ID to delete: ");
            int id = scanner.nextInt();

            books.removeIf(book -> book.id == id);
            System.out.println("Book deleted successfully (if it existed).");
        }

        private void viewAllBooks() {
            System.out.println("\nList of Books:");
            for (Book book : books) {
                System.out.println(book);
            }
        }

        private void manageUsers() {
            System.out.println("User Management:");
            for (User user : users.values()) {
                System.out.println("User ID: " + user.userId + ", Name: " + user.name);
            }
        }

        // User functionality
        public void userMenu(User user) {
            while (true) {
                System.out.println("\nUser Menu:");
                System.out.println("1. View Available Books");
                System.out.println("2. Search Book");
                System.out.println("3. Issue Book");
                System.out.println("4. Return Book");
                System.out.println("5. Logout");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        viewAvailableBooks();
                        break;
                    case 2:
                        searchBook();
                        break;
                    case 3:
                        issueBook(user);
                        break;
                    case 4:
                        returnBook(user);
                        break;
                    case 5:
                        System.out.println("Logged out successfully.");
                        return;
                    default:
                        System.out.println("Invalid choice! Try again.");
                }
            }
        }

        private void viewAvailableBooks() {
            System.out.println("\nAvailable Books:");
            for (Book book : books) {
                if (!book.isIssued) {
                    System.out.println(book);
                }
            }
        }

        private void searchBook() {
            System.out.print("Enter Book Title to search: ");
            String title = scanner.nextLine();
            for (Book book : books) {
                if (book.title.equalsIgnoreCase(title)) {
                    System.out.println(book);
                    return;
                }
            }
            System.out.println("Book not found.");
        }

        private void issueBook(User user) {
            System.out.print("Enter Book ID to issue: ");
            int id = scanner.nextInt();

            for (Book book : books) {
                if (book.id == id && !book.isIssued) {
                    book.isIssued = true;
                    user.issuedBooks.add(book);
                    System.out.println("Book issued successfully!");
                    return;
                }
            }
            System.out.println("Book not available or invalid ID.");
        }

        private void returnBook(User user) {
            System.out.print("Enter Book ID to return: ");
            int id = scanner.nextInt();

            for (Book book : user.issuedBooks) {
                if (book.id == id) {
                    book.isIssued = false;
                    user.issuedBooks.remove(book);
                    System.out.println("Book returned successfully!");
                    return;
                }
            }
            System.out.println("You don't have this book issued.");
        }
    }

    public static void main(String[] args) {
        Library library = new Library();
        library.users.put(1, new User(1, "John Doe"));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nWelcome to the Library Management System!");
            System.out.println("1. Login as Admin");
            System.out.println("2. Login as User");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    library.adminMenu();
                    break;
                case 2:
                    System.out.print("Enter User ID: ");
                    int userId = scanner.nextInt();
                    if (library.users.containsKey(userId)) {
                        library.userMenu(library.users.get(userId));
                    } else {
                        System.out.println("Invalid User ID.");
                    }
                    break;
                case 3:
                    System.out.println("Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        }
    }
}
